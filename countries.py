from tkinter import *
import random as r
import controls


class Countries:
    def __init__(self, tk):
        self.tk = tk
        self.score = 0
        self.current_question = Label()
        self.current_flag = ''
        self.shorthand = {
            'dza': 'algeria',
            'ago': 'angola',
            'ben': 'benin',
            'bwa': 'botswana',
            'bfa': 'burkina faso',
            'bdi': 'burundi',
            'cpv': 'cape verde',
            'cmr': 'cameroon',
            'caf': 'central african republic',
            'tcd': 'chad',
            'com': 'comoros',
            'cog': 'congo',
            'cod': 'democratic republic of the congo',
            'dji': 'djibouti',
            'egy': 'egypt',
            'gnq': 'equatorial guinea',
            'eri': 'eritrea',
            'swz': 'eswatini',
            'eth': 'ethiopia',
            'gab': 'gabon',
            'gmb': 'gambia',
            'gha': 'ghana',
            'gin': 'guinea',
            'gnb': 'guinea-bissau',
            'civ': 'ivory coast',
            'ken': 'kenya',
            'lso': 'lesotho',
            'lbr': 'liberia',
            'lby': 'libya',
            'mdg': 'madagascar',
            'mwi': 'malawi',
            'mli': 'mali',
            'mrt': 'mauritania',
            'mus': 'mauritius',
            'mar': 'morocco',
            'moz': 'mozambique',
            'nam': 'namibia',
            'ner': 'niger',
            'nga': 'nigeria',
            'rwa': 'rwanda',
            'stp': 'sao tome and principe',
            'sen': 'senegal',
            'syc': 'seychelles',
            'sle': 'sierra leone',
            'som': 'somalia',
            'zaf': 'south africa',
            'ssd': 'south sudan',
            'sdn': 'sudan',
            'tza': 'tanzania',
            'tgo': 'togo',
            'tun': 'tunisia',
            'uga': 'uganda',
            'zmb': 'zambia',
            'zwe': 'zimbabwe',
            'afg': 'afghanistan',
            'arm': 'armenia',
            'aze': 'azerbaijan',
            'bhr': 'bahrain',
            'bgd': 'bangladesh',
            'btn': 'bhutan',
            'brn': 'brunei',
            'khm': 'cambodia',
            'chn': 'china',
            'cyp': 'cyprus',
            'geo': 'georgia',
            'ind': 'india',
            'idn': 'indonesia',
            'irn': 'iran',
            'irq': 'iraq',
            'isr': 'israel',
            'jpn': 'japan',
            'jor': 'jordan',
            'kaz': 'kazakhstan',
            'kwt': 'kuwait',
            'kgz': 'kyrgyzstan',
            'lao': 'laos',
            'lbn': 'lebanon',
            'mys': 'malaysia',
            'mdv': 'maldives',
            'mng': 'mongolia',
            'mmr': 'myanmar',
            'npl': 'nepal',
            'prk': 'north korea',
            'omn': 'oman',
            'pak': 'pakistan',
            'pse': 'palestine',
            'phl': 'philippines',
            'qat': 'qatar',
            'sau': 'saudi arabia',
            'sgp': 'singapore',
            'kor': 'south korea',
            'lka': 'sri lanka',
            'syr': 'syria',
            'twn': 'taiwan',
            'tjk': 'tajikistan',
            'tha': 'thailand',
            'tls': 'timor-leste',
            'tur': 'turkey',
            'tkm': 'turkmenistan',
            'are': 'united arab emirates',
            'uzb': 'uzbekistan',
            'vnm': 'vietnam',
            'yem': 'yemen',
            'alb': 'albania',
            'and': 'andorra',
            'aut': 'austria',
            'blr': 'belarus',
            'bel': 'belgium',
            'bih': 'bosnia and herzegovina',
            'bgr': 'bulgaria',
            'hrv': 'croatia',
            'cze': 'czech republic',
            'dnk': 'denmark',
            'est': 'estonia',
            'fin': 'finland',
            'fra': 'france',
            'deu': 'germany',
            'grc': 'greece',
            'hun': 'hungary',
            'isl': 'iceland',
            'irl': 'ireland',
            'ita': 'italy',
            'kos': 'kosovo',
            'lva': 'latvia',
            'lie': 'liechtenstein',
            'ltu': 'lithuania',
            'lux': 'luxembourg',
            'mlt': 'malta',
            'mda': 'moldova',
            'mco': 'monaco',
            'mne': 'montenegro',
            'nld': 'netherlands',
            'mkd': 'north macedonia',
            'nor': 'norway',
            'pol': 'poland',
            'prt': 'portugal',
            'rou': 'romania',
            'rus': 'russia',
            'smr': 'san marino',
            'srb': 'serbia',
            'svk': 'slovakia',
            'svn': 'slovenia',
            'esp': 'spain',
            'swe': 'sweden',
            'che': 'switzerland',
            'ukr': 'ukraine',
            'gbr': 'united kingdom',
            'vat': 'vatican city',
            'atg': 'antigua and barbuda',
            'bhs': 'bahamas',
            'brb': 'barbados',
            'blz': 'belize',
            'can': 'canada',
            'cri': 'costa rica',
            'cub': 'cuba',
            'dma': 'dominica',
            'dom': 'dominican republic',
            'slv': 'el salvador',
            'grd': 'grenada',
            'gtm': 'guatemala',
            'hti': 'haiti',
            'hnd': 'honduras',
            'jam': 'jamaica',
            'mex': 'mexico',
            'nic': 'nicaragua',
            'pan': 'panama',
            'kna': 'saint kitts and nevis',
            'lca': 'saint lucia',
            'vct': 'saint vincent and the grenadines',
            'tto': 'trinidad and tobago',
            'usa': 'united states',
            'arg': 'argentina',
            'bol': 'bolivia',
            'bra': 'brazil',
            'chl': 'chile',
            'col': 'colombia',
            'ecu': 'ecuador',
            'guy': 'guyana',
            'pry': 'paraguay',
            'per': 'peru',
            'sur': 'suriname',
            'ury': 'uruguay',
            'ven': 'venezuela'
        }
        self.africa = {
            1: Countries.CountryQuestion('dz'.lower(), tk),
            2: Countries.CountryQuestion('ao'.lower(), tk),
            3: Countries.CountryQuestion('bj'.lower(), tk),
            4: Countries.CountryQuestion('bw'.lower(), tk),
            5: Countries.CountryQuestion('bf'.lower(), tk),
            6: Countries.CountryQuestion('bi'.lower(), tk),
            7: Countries.CountryQuestion('cv'.lower(), tk),
            8: Countries.CountryQuestion('cm'.lower(), tk),
            9: Countries.CountryQuestion('cf'.lower(), tk),
            10: Countries.CountryQuestion('td'.lower(), tk),
            11: Countries.CountryQuestion('km'.lower(), tk),
            12: Countries.CountryQuestion('cg'.lower(), tk),
            13: Countries.CountryQuestion('cd'.lower(), tk),
            14: Countries.CountryQuestion('dj'.lower(), tk),
            15: Countries.CountryQuestion('eg'.lower(), tk),
            16: Countries.CountryQuestion('gq'.lower(), tk),
            17: Countries.CountryQuestion('er'.lower(), tk),
            18: Countries.CountryQuestion('sz'.lower(), tk),
            19: Countries.CountryQuestion('et'.lower(), tk),
            20: Countries.CountryQuestion('ga'.lower(), tk),
            21: Countries.CountryQuestion('gm'.lower(), tk),
            22: Countries.CountryQuestion('gh'.lower(), tk),
            23: Countries.CountryQuestion('gn'.lower(), tk),
            24: Countries.CountryQuestion('gw'.lower(), tk),
            25: Countries.CountryQuestion('ci'.lower(), tk),
            26: Countries.CountryQuestion('ke'.lower(), tk),
            27: Countries.CountryQuestion('ls'.lower(), tk),
            28: Countries.CountryQuestion('lr'.lower(), tk),
            29: Countries.CountryQuestion('ly'.lower(), tk),
            30: Countries.CountryQuestion('mg'.lower(), tk),
            31: Countries.CountryQuestion('mw'.lower(), tk),
            32: Countries.CountryQuestion('ml'.lower(), tk),
            33: Countries.CountryQuestion('mr'.lower(), tk),
            34: Countries.CountryQuestion('mu'.lower(), tk),
            35: Countries.CountryQuestion('ma'.lower(), tk),
            36: Countries.CountryQuestion('mz'.lower(), tk),
            37: Countries.CountryQuestion('na'.lower(), tk),
            38: Countries.CountryQuestion('ne'.lower(), tk),
            39: Countries.CountryQuestion('ng'.lower(), tk),
            40: Countries.CountryQuestion('rw'.lower(), tk),
            41: Countries.CountryQuestion('st'.lower(), tk),
            42: Countries.CountryQuestion('sn'.lower(), tk),
            43: Countries.CountryQuestion('sc'.lower(), tk),
            44: Countries.CountryQuestion('sl'.lower(), tk),
            45: Countries.CountryQuestion('so'.lower(), tk),
            46: Countries.CountryQuestion('za'.lower(), tk),
            47: Countries.CountryQuestion('ss'.lower(), tk),
            48: Countries.CountryQuestion('sd'.lower(), tk),
            49: Countries.CountryQuestion('tz'.lower(), tk),
            50: Countries.CountryQuestion('tg'.lower(), tk),
            51: Countries.CountryQuestion('tn'.lower(), tk),
            52: Countries.CountryQuestion('ug'.lower(), tk),
            53: Countries.CountryQuestion('zm'.lower(), tk),
            54: Countries.CountryQuestion('zw'.lower(), tk)

        }
        self.asia = {
            1: Countries.CountryQuestion('af'.lower(), tk),
            2: Countries.CountryQuestion('am'.lower(), tk),
            3: Countries.CountryQuestion('az'.lower(), tk),
            4: Countries.CountryQuestion('bh'.lower(), tk),
            5: Countries.CountryQuestion('bd'.lower(), tk),
            6: Countries.CountryQuestion('bt'.lower(), tk),
            7: Countries.CountryQuestion('bn'.lower(), tk),
            8: Countries.CountryQuestion('kh'.lower(), tk),
            9: Countries.CountryQuestion('cn'.lower(), tk),
            10: Countries.CountryQuestion('cy'.lower(), tk),
            11: Countries.CountryQuestion('ge'.lower(), tk),
            12: Countries.CountryQuestion('in'.lower(), tk),
            13: Countries.CountryQuestion('id'.lower(), tk),
            14: Countries.CountryQuestion('ir'.lower(), tk),
            15: Countries.CountryQuestion('iq'.lower(), tk),
            16: Countries.CountryQuestion('il'.lower(), tk),
            17: Countries.CountryQuestion('jp'.lower(), tk),
            18: Countries.CountryQuestion('jo'.lower(), tk),
            19: Countries.CountryQuestion('kz'.lower(), tk),
            20: Countries.CountryQuestion('kw'.lower(), tk),
            21: Countries.CountryQuestion('kg'.lower(), tk),
            22: Countries.CountryQuestion('la'.lower(), tk),
            23: Countries.CountryQuestion('lb'.lower(), tk),
            24: Countries.CountryQuestion('my'.lower(), tk),
            25: Countries.CountryQuestion('mv'.lower(), tk),
            26: Countries.CountryQuestion('mn'.lower(), tk),
            27: Countries.CountryQuestion('mm'.lower(), tk),
            28: Countries.CountryQuestion('np'.lower(), tk),
            29: Countries.CountryQuestion('kp'.lower(), tk),
            30: Countries.CountryQuestion('om'.lower(), tk),
            31: Countries.CountryQuestion('pk'.lower(), tk),
            32: Countries.CountryQuestion('ps'.lower(), tk),
            33: Countries.CountryQuestion('ph'.lower(), tk),
            34: Countries.CountryQuestion('qa'.lower(), tk),
            35: Countries.CountryQuestion('sa'.lower(), tk),
            36: Countries.CountryQuestion('sg'.lower(), tk),
            37: Countries.CountryQuestion('kr'.lower(), tk),
            38: Countries.CountryQuestion('lk'.lower(), tk),
            39: Countries.CountryQuestion('sy'.lower(), tk),
            40: Countries.CountryQuestion('tw'.lower(), tk),
            41: Countries.CountryQuestion('tj'.lower(), tk),
            42: Countries.CountryQuestion('th'.lower(), tk),
            43: Countries.CountryQuestion('tl'.lower(), tk),
            44: Countries.CountryQuestion('tr'.lower(), tk),
            45: Countries.CountryQuestion('tm'.lower(), tk),
            46: Countries.CountryQuestion('ae'.lower(), tk),
            47: Countries.CountryQuestion('uz'.lower(), tk),
            48: Countries.CountryQuestion('vn'.lower(), tk),
            49: Countries.CountryQuestion('ye'.lower(), tk)
        }
        self.europe = {
            1: Countries.CountryQuestion('al'.lower(), tk),
            2: Countries.CountryQuestion('ad'.lower(), tk),
            3: Countries.CountryQuestion('am'.lower(), tk),
            4: Countries.CountryQuestion('at'.lower(), tk),
            5: Countries.CountryQuestion('az'.lower(), tk),
            6: Countries.CountryQuestion('by'.lower(), tk),
            7: Countries.CountryQuestion('be'.lower(), tk),
            8: Countries.CountryQuestion('ba'.lower(), tk),
            9: Countries.CountryQuestion('bg'.lower(), tk),
            10: Countries.CountryQuestion('hr'.lower(), tk),
            11: Countries.CountryQuestion('cy'.lower(), tk),
            12: Countries.CountryQuestion('cz'.lower(), tk),
            13: Countries.CountryQuestion('dk'.lower(), tk),
            14: Countries.CountryQuestion('ee'.lower(), tk),
            15: Countries.CountryQuestion('fi'.lower(), tk),
            16: Countries.CountryQuestion('fr'.lower(), tk),
            17: Countries.CountryQuestion('ge'.lower(), tk),
            18: Countries.CountryQuestion('de'.lower(), tk),
            19: Countries.CountryQuestion('gr'.lower(), tk),
            20: Countries.CountryQuestion('hu'.lower(), tk),
            21: Countries.CountryQuestion('is'.lower(), tk),
            22: Countries.CountryQuestion('ie'.lower(), tk),
            23: Countries.CountryQuestion('it'.lower(), tk),
            24: Countries.CountryQuestion('kz'.lower(), tk),
            25: Countries.CountryQuestion('xk'.lower(), tk),
            26: Countries.CountryQuestion('lv'.lower(), tk),
            27: Countries.CountryQuestion('li'.lower(), tk),
            28: Countries.CountryQuestion('lt'.lower(), tk),
            29: Countries.CountryQuestion('lu'.lower(), tk),
            30: Countries.CountryQuestion('mt'.lower(), tk),
            31: Countries.CountryQuestion('md'.lower(), tk),
            32: Countries.CountryQuestion('mc'.lower(), tk),
            33: Countries.CountryQuestion('me'.lower(), tk),
            34: Countries.CountryQuestion('nl'.lower(), tk),
            35: Countries.CountryQuestion('mk'.lower(), tk),
            36: Countries.CountryQuestion('no'.lower(), tk),
            37: Countries.CountryQuestion('pl'.lower(), tk),
            38: Countries.CountryQuestion('pt'.lower(), tk),
            39: Countries.CountryQuestion('ro'.lower(), tk),
            40: Countries.CountryQuestion('ru'.lower(), tk),
            41: Countries.CountryQuestion('sm'.lower(), tk),
            42: Countries.CountryQuestion('rs'.lower(), tk),
            43: Countries.CountryQuestion('sk'.lower(), tk),
            44: Countries.CountryQuestion('si'.lower(), tk),
            45: Countries.CountryQuestion('es'.lower(), tk),
            46: Countries.CountryQuestion('se'.lower(), tk),
            47: Countries.CountryQuestion('ch'.lower(), tk),
            48: Countries.CountryQuestion('tr'.lower(), tk),
            49: Countries.CountryQuestion('ua'.lower(), tk),
            50: Countries.CountryQuestion('gb'.lower(), tk),
            51: Countries.CountryQuestion('va'.lower(), tk)
        }
        self.north_america = {
            1: Countries.CountryQuestion('ag'.lower(), tk),
            2: Countries.CountryQuestion('bs'.lower(), tk),
            3: Countries.CountryQuestion('bb'.lower(), tk),
            4: Countries.CountryQuestion('bz'.lower(), tk),
            5: Countries.CountryQuestion('ca'.lower(), tk),
            6: Countries.CountryQuestion('cr'.lower(), tk),
            7: Countries.CountryQuestion('cu'.lower(), tk),
            8: Countries.CountryQuestion('dm'.lower(), tk),
            9: Countries.CountryQuestion('do'.lower(), tk),
            10: Countries.CountryQuestion('sv'.lower(), tk),
            11: Countries.CountryQuestion('gd'.lower(), tk),
            12: Countries.CountryQuestion('gt'.lower(), tk),
            13: Countries.CountryQuestion('ht'.lower(), tk),
            14: Countries.CountryQuestion('hn'.lower(), tk),
            15: Countries.CountryQuestion('jm'.lower(), tk),
            16: Countries.CountryQuestion('mx'.lower(), tk),
            17: Countries.CountryQuestion('ni'.lower(), tk),
            18: Countries.CountryQuestion('pa'.lower(), tk),
            19: Countries.CountryQuestion('kn'.lower(), tk),
            20: Countries.CountryQuestion('lc'.lower(), tk),
            21: Countries.CountryQuestion('vc'.lower(), tk),
            22: Countries.CountryQuestion('tt'.lower(), tk),
            23: Countries.CountryQuestion('us'.lower(), tk)
        }
        self.south_america = {
            1: Countries.CountryQuestion('ar'.lower(), tk),
            2: Countries.CountryQuestion('bo'.lower(), tk),
            3: Countries.CountryQuestion('br'.lower(), tk),
            4: Countries.CountryQuestion('cl'.lower(), tk),
            5: Countries.CountryQuestion('co'.lower(), tk),
            6: Countries.CountryQuestion('ec'.lower(), tk),
            7: Countries.CountryQuestion('gy'.lower(), tk),
            8: Countries.CountryQuestion('py'.lower(), tk),
            9: Countries.CountryQuestion('pe'.lower(), tk),
            10: Countries.CountryQuestion('sr'.lower(), tk),
            11: Countries.CountryQuestion('uy'.lower(), tk),
            12: Countries.CountryQuestion('ve'.lower(), tk)
        }

    def get_flag(self):
        return self.current_flag

    class CountryQuestion:
        def __init__(self, key, tk):
            self.key = key
            self.location = ('./countries/' + key + '.png').strip()
            self.entry = Entry(tk)

        def show(self):
            # self.label.grid(row=1, column=1)
            # self.entry.grid(row=1, column=2)
            self.entry.pack()


def check_answer(image_directory, question):
    return image_directory == question.location
